//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.34014.
// 
#pragma warning disable 1591

namespace Testing.ProviderService {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ProviderWSSoap", Namespace="http://tempuri.org/")]
    public partial class ProviderWS : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetProviderDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveProviderDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPracticeListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFacilityListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFacilityListForProvidersOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetProvidersForPatientListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPatientForProviderListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetProviderImageDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveProvidermageDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPatientProviderInfoListOperationCompleted;
        
        private System.Threading.SendOrPostCallback ProviderEmailSearchOperationCompleted;
        
        private System.Threading.SendOrPostCallback ProviderSearchOperationCompleted;
        
        private System.Threading.SendOrPostCallback ActivateProviderOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeactivateProviderOperationCompleted;
        
        private System.Threading.SendOrPostCallback ChangeProviderEmailOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public ProviderWS() {
            this.Url = global::Testing.Properties.Settings.Default.Testing_ProviderService_ProviderWS;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetProviderDataCompletedEventHandler GetProviderDataCompleted;
        
        /// <remarks/>
        public event SaveProviderDataCompletedEventHandler SaveProviderDataCompleted;
        
        /// <remarks/>
        public event GetPracticeListCompletedEventHandler GetPracticeListCompleted;
        
        /// <remarks/>
        public event GetFacilityListCompletedEventHandler GetFacilityListCompleted;
        
        /// <remarks/>
        public event GetFacilityListForProvidersCompletedEventHandler GetFacilityListForProvidersCompleted;
        
        /// <remarks/>
        public event GetProvidersForPatientListCompletedEventHandler GetProvidersForPatientListCompleted;
        
        /// <remarks/>
        public event GetPatientForProviderListCompletedEventHandler GetPatientForProviderListCompleted;
        
        /// <remarks/>
        public event GetProviderImageDataCompletedEventHandler GetProviderImageDataCompleted;
        
        /// <remarks/>
        public event SaveProvidermageDataCompletedEventHandler SaveProvidermageDataCompleted;
        
        /// <remarks/>
        public event GetPatientProviderInfoListCompletedEventHandler GetPatientProviderInfoListCompleted;
        
        /// <remarks/>
        public event ProviderEmailSearchCompletedEventHandler ProviderEmailSearchCompleted;
        
        /// <remarks/>
        public event ProviderSearchCompletedEventHandler ProviderSearchCompleted;
        
        /// <remarks/>
        public event ActivateProviderCompletedEventHandler ActivateProviderCompleted;
        
        /// <remarks/>
        public event DeactivateProviderCompletedEventHandler DeactivateProviderCompleted;
        
        /// <remarks/>
        public event ChangeProviderEmailCompletedEventHandler ChangeProviderEmailCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetProviderData", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ProviderData GetProviderData(ProviderParms Parms, string Token, long UserId, long FacilityId) {
            object[] results = this.Invoke("GetProviderData", new object[] {
                        Parms,
                        Token,
                        UserId,
                        FacilityId});
            return ((ProviderData)(results[0]));
        }
        
        /// <remarks/>
        public void GetProviderDataAsync(ProviderParms Parms, string Token, long UserId, long FacilityId) {
            this.GetProviderDataAsync(Parms, Token, UserId, FacilityId, null);
        }
        
        /// <remarks/>
        public void GetProviderDataAsync(ProviderParms Parms, string Token, long UserId, long FacilityId, object userState) {
            if ((this.GetProviderDataOperationCompleted == null)) {
                this.GetProviderDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetProviderDataOperationCompleted);
            }
            this.InvokeAsync("GetProviderData", new object[] {
                        Parms,
                        Token,
                        UserId,
                        FacilityId}, this.GetProviderDataOperationCompleted, userState);
        }
        
        private void OnGetProviderDataOperationCompleted(object arg) {
            if ((this.GetProviderDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetProviderDataCompleted(this, new GetProviderDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SaveProviderData", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ProviderResponse SaveProviderData(ProviderData ProviderData, string Token, long UserId, long FacilityId) {
            object[] results = this.Invoke("SaveProviderData", new object[] {
                        ProviderData,
                        Token,
                        UserId,
                        FacilityId});
            return ((ProviderResponse)(results[0]));
        }
        
        /// <remarks/>
        public void SaveProviderDataAsync(ProviderData ProviderData, string Token, long UserId, long FacilityId) {
            this.SaveProviderDataAsync(ProviderData, Token, UserId, FacilityId, null);
        }
        
        /// <remarks/>
        public void SaveProviderDataAsync(ProviderData ProviderData, string Token, long UserId, long FacilityId, object userState) {
            if ((this.SaveProviderDataOperationCompleted == null)) {
                this.SaveProviderDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveProviderDataOperationCompleted);
            }
            this.InvokeAsync("SaveProviderData", new object[] {
                        ProviderData,
                        Token,
                        UserId,
                        FacilityId}, this.SaveProviderDataOperationCompleted, userState);
        }
        
        private void OnSaveProviderDataOperationCompleted(object arg) {
            if ((this.SaveProviderDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveProviderDataCompleted(this, new SaveProviderDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetPracticeList", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ProviderTableData GetPracticeList(long PracticeId, string Token, long UserId, long FacilityId) {
            object[] results = this.Invoke("GetPracticeList", new object[] {
                        PracticeId,
                        Token,
                        UserId,
                        FacilityId});
            return ((ProviderTableData)(results[0]));
        }
        
        /// <remarks/>
        public void GetPracticeListAsync(long PracticeId, string Token, long UserId, long FacilityId) {
            this.GetPracticeListAsync(PracticeId, Token, UserId, FacilityId, null);
        }
        
        /// <remarks/>
        public void GetPracticeListAsync(long PracticeId, string Token, long UserId, long FacilityId, object userState) {
            if ((this.GetPracticeListOperationCompleted == null)) {
                this.GetPracticeListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPracticeListOperationCompleted);
            }
            this.InvokeAsync("GetPracticeList", new object[] {
                        PracticeId,
                        Token,
                        UserId,
                        FacilityId}, this.GetPracticeListOperationCompleted, userState);
        }
        
        private void OnGetPracticeListOperationCompleted(object arg) {
            if ((this.GetPracticeListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPracticeListCompleted(this, new GetPracticeListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetFacilityList", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ProviderTableData GetFacilityList(long CkFacilityId, string Token, long UserId, long FacilityId) {
            object[] results = this.Invoke("GetFacilityList", new object[] {
                        CkFacilityId,
                        Token,
                        UserId,
                        FacilityId});
            return ((ProviderTableData)(results[0]));
        }
        
        /// <remarks/>
        public void GetFacilityListAsync(long CkFacilityId, string Token, long UserId, long FacilityId) {
            this.GetFacilityListAsync(CkFacilityId, Token, UserId, FacilityId, null);
        }
        
        /// <remarks/>
        public void GetFacilityListAsync(long CkFacilityId, string Token, long UserId, long FacilityId, object userState) {
            if ((this.GetFacilityListOperationCompleted == null)) {
                this.GetFacilityListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFacilityListOperationCompleted);
            }
            this.InvokeAsync("GetFacilityList", new object[] {
                        CkFacilityId,
                        Token,
                        UserId,
                        FacilityId}, this.GetFacilityListOperationCompleted, userState);
        }
        
        private void OnGetFacilityListOperationCompleted(object arg) {
            if ((this.GetFacilityListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFacilityListCompleted(this, new GetFacilityListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetFacilityListForProviders", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ProviderTableData GetFacilityListForProviders(long ProviderId, string Token, long UserId, long FacilityId) {
            object[] results = this.Invoke("GetFacilityListForProviders", new object[] {
                        ProviderId,
                        Token,
                        UserId,
                        FacilityId});
            return ((ProviderTableData)(results[0]));
        }
        
        /// <remarks/>
        public void GetFacilityListForProvidersAsync(long ProviderId, string Token, long UserId, long FacilityId) {
            this.GetFacilityListForProvidersAsync(ProviderId, Token, UserId, FacilityId, null);
        }
        
        /// <remarks/>
        public void GetFacilityListForProvidersAsync(long ProviderId, string Token, long UserId, long FacilityId, object userState) {
            if ((this.GetFacilityListForProvidersOperationCompleted == null)) {
                this.GetFacilityListForProvidersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFacilityListForProvidersOperationCompleted);
            }
            this.InvokeAsync("GetFacilityListForProviders", new object[] {
                        ProviderId,
                        Token,
                        UserId,
                        FacilityId}, this.GetFacilityListForProvidersOperationCompleted, userState);
        }
        
        private void OnGetFacilityListForProvidersOperationCompleted(object arg) {
            if ((this.GetFacilityListForProvidersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFacilityListForProvidersCompleted(this, new GetFacilityListForProvidersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetProvidersForPatientList", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ProviderTableData GetProvidersForPatientList(long PatientId, string Token, long UserId, long FacilityId) {
            object[] results = this.Invoke("GetProvidersForPatientList", new object[] {
                        PatientId,
                        Token,
                        UserId,
                        FacilityId});
            return ((ProviderTableData)(results[0]));
        }
        
        /// <remarks/>
        public void GetProvidersForPatientListAsync(long PatientId, string Token, long UserId, long FacilityId) {
            this.GetProvidersForPatientListAsync(PatientId, Token, UserId, FacilityId, null);
        }
        
        /// <remarks/>
        public void GetProvidersForPatientListAsync(long PatientId, string Token, long UserId, long FacilityId, object userState) {
            if ((this.GetProvidersForPatientListOperationCompleted == null)) {
                this.GetProvidersForPatientListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetProvidersForPatientListOperationCompleted);
            }
            this.InvokeAsync("GetProvidersForPatientList", new object[] {
                        PatientId,
                        Token,
                        UserId,
                        FacilityId}, this.GetProvidersForPatientListOperationCompleted, userState);
        }
        
        private void OnGetProvidersForPatientListOperationCompleted(object arg) {
            if ((this.GetProvidersForPatientListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetProvidersForPatientListCompleted(this, new GetProvidersForPatientListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetPatientForProviderList", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ProviderTableData GetPatientForProviderList(long ProviderId, string Token, long UserId, long FacilityId) {
            object[] results = this.Invoke("GetPatientForProviderList", new object[] {
                        ProviderId,
                        Token,
                        UserId,
                        FacilityId});
            return ((ProviderTableData)(results[0]));
        }
        
        /// <remarks/>
        public void GetPatientForProviderListAsync(long ProviderId, string Token, long UserId, long FacilityId) {
            this.GetPatientForProviderListAsync(ProviderId, Token, UserId, FacilityId, null);
        }
        
        /// <remarks/>
        public void GetPatientForProviderListAsync(long ProviderId, string Token, long UserId, long FacilityId, object userState) {
            if ((this.GetPatientForProviderListOperationCompleted == null)) {
                this.GetPatientForProviderListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPatientForProviderListOperationCompleted);
            }
            this.InvokeAsync("GetPatientForProviderList", new object[] {
                        ProviderId,
                        Token,
                        UserId,
                        FacilityId}, this.GetPatientForProviderListOperationCompleted, userState);
        }
        
        private void OnGetPatientForProviderListOperationCompleted(object arg) {
            if ((this.GetPatientForProviderListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPatientForProviderListCompleted(this, new GetPatientForProviderListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetProviderImageData", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ProviderImageData GetProviderImageData(ProviderParms Parms, string Token, long UserId, long FacilityId) {
            object[] results = this.Invoke("GetProviderImageData", new object[] {
                        Parms,
                        Token,
                        UserId,
                        FacilityId});
            return ((ProviderImageData)(results[0]));
        }
        
        /// <remarks/>
        public void GetProviderImageDataAsync(ProviderParms Parms, string Token, long UserId, long FacilityId) {
            this.GetProviderImageDataAsync(Parms, Token, UserId, FacilityId, null);
        }
        
        /// <remarks/>
        public void GetProviderImageDataAsync(ProviderParms Parms, string Token, long UserId, long FacilityId, object userState) {
            if ((this.GetProviderImageDataOperationCompleted == null)) {
                this.GetProviderImageDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetProviderImageDataOperationCompleted);
            }
            this.InvokeAsync("GetProviderImageData", new object[] {
                        Parms,
                        Token,
                        UserId,
                        FacilityId}, this.GetProviderImageDataOperationCompleted, userState);
        }
        
        private void OnGetProviderImageDataOperationCompleted(object arg) {
            if ((this.GetProviderImageDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetProviderImageDataCompleted(this, new GetProviderImageDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SaveProvidermageData", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ProviderImageData SaveProvidermageData(ProviderImageData ImageData, string Token, long UserId, long FacilityId) {
            object[] results = this.Invoke("SaveProvidermageData", new object[] {
                        ImageData,
                        Token,
                        UserId,
                        FacilityId});
            return ((ProviderImageData)(results[0]));
        }
        
        /// <remarks/>
        public void SaveProvidermageDataAsync(ProviderImageData ImageData, string Token, long UserId, long FacilityId) {
            this.SaveProvidermageDataAsync(ImageData, Token, UserId, FacilityId, null);
        }
        
        /// <remarks/>
        public void SaveProvidermageDataAsync(ProviderImageData ImageData, string Token, long UserId, long FacilityId, object userState) {
            if ((this.SaveProvidermageDataOperationCompleted == null)) {
                this.SaveProvidermageDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveProvidermageDataOperationCompleted);
            }
            this.InvokeAsync("SaveProvidermageData", new object[] {
                        ImageData,
                        Token,
                        UserId,
                        FacilityId}, this.SaveProvidermageDataOperationCompleted, userState);
        }
        
        private void OnSaveProvidermageDataOperationCompleted(object arg) {
            if ((this.SaveProvidermageDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveProvidermageDataCompleted(this, new SaveProvidermageDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetPatientProviderInfoList", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ProviderTableData GetPatientProviderInfoList(long CkPatientId, long CkFacilityId, string Token, long UserId, long FacilityId) {
            object[] results = this.Invoke("GetPatientProviderInfoList", new object[] {
                        CkPatientId,
                        CkFacilityId,
                        Token,
                        UserId,
                        FacilityId});
            return ((ProviderTableData)(results[0]));
        }
        
        /// <remarks/>
        public void GetPatientProviderInfoListAsync(long CkPatientId, long CkFacilityId, string Token, long UserId, long FacilityId) {
            this.GetPatientProviderInfoListAsync(CkPatientId, CkFacilityId, Token, UserId, FacilityId, null);
        }
        
        /// <remarks/>
        public void GetPatientProviderInfoListAsync(long CkPatientId, long CkFacilityId, string Token, long UserId, long FacilityId, object userState) {
            if ((this.GetPatientProviderInfoListOperationCompleted == null)) {
                this.GetPatientProviderInfoListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPatientProviderInfoListOperationCompleted);
            }
            this.InvokeAsync("GetPatientProviderInfoList", new object[] {
                        CkPatientId,
                        CkFacilityId,
                        Token,
                        UserId,
                        FacilityId}, this.GetPatientProviderInfoListOperationCompleted, userState);
        }
        
        private void OnGetPatientProviderInfoListOperationCompleted(object arg) {
            if ((this.GetPatientProviderInfoListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPatientProviderInfoListCompleted(this, new GetPatientProviderInfoListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ProviderEmailSearch", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ProviderTableData ProviderEmailSearch(string EMail, string Token, long UserId, long FacilityId) {
            object[] results = this.Invoke("ProviderEmailSearch", new object[] {
                        EMail,
                        Token,
                        UserId,
                        FacilityId});
            return ((ProviderTableData)(results[0]));
        }
        
        /// <remarks/>
        public void ProviderEmailSearchAsync(string EMail, string Token, long UserId, long FacilityId) {
            this.ProviderEmailSearchAsync(EMail, Token, UserId, FacilityId, null);
        }
        
        /// <remarks/>
        public void ProviderEmailSearchAsync(string EMail, string Token, long UserId, long FacilityId, object userState) {
            if ((this.ProviderEmailSearchOperationCompleted == null)) {
                this.ProviderEmailSearchOperationCompleted = new System.Threading.SendOrPostCallback(this.OnProviderEmailSearchOperationCompleted);
            }
            this.InvokeAsync("ProviderEmailSearch", new object[] {
                        EMail,
                        Token,
                        UserId,
                        FacilityId}, this.ProviderEmailSearchOperationCompleted, userState);
        }
        
        private void OnProviderEmailSearchOperationCompleted(object arg) {
            if ((this.ProviderEmailSearchCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProviderEmailSearchCompleted(this, new ProviderEmailSearchCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ProviderSearch", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ProviderTableData ProviderSearch(ProviderSearchParms Parms, string Token, long UserId, long FacilityId) {
            object[] results = this.Invoke("ProviderSearch", new object[] {
                        Parms,
                        Token,
                        UserId,
                        FacilityId});
            return ((ProviderTableData)(results[0]));
        }
        
        /// <remarks/>
        public void ProviderSearchAsync(ProviderSearchParms Parms, string Token, long UserId, long FacilityId) {
            this.ProviderSearchAsync(Parms, Token, UserId, FacilityId, null);
        }
        
        /// <remarks/>
        public void ProviderSearchAsync(ProviderSearchParms Parms, string Token, long UserId, long FacilityId, object userState) {
            if ((this.ProviderSearchOperationCompleted == null)) {
                this.ProviderSearchOperationCompleted = new System.Threading.SendOrPostCallback(this.OnProviderSearchOperationCompleted);
            }
            this.InvokeAsync("ProviderSearch", new object[] {
                        Parms,
                        Token,
                        UserId,
                        FacilityId}, this.ProviderSearchOperationCompleted, userState);
        }
        
        private void OnProviderSearchOperationCompleted(object arg) {
            if ((this.ProviderSearchCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProviderSearchCompleted(this, new ProviderSearchCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ActivateProvider", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ProviderResponse ActivateProvider(long ProviderId, string Token, long UserId, long FacilityId) {
            object[] results = this.Invoke("ActivateProvider", new object[] {
                        ProviderId,
                        Token,
                        UserId,
                        FacilityId});
            return ((ProviderResponse)(results[0]));
        }
        
        /// <remarks/>
        public void ActivateProviderAsync(long ProviderId, string Token, long UserId, long FacilityId) {
            this.ActivateProviderAsync(ProviderId, Token, UserId, FacilityId, null);
        }
        
        /// <remarks/>
        public void ActivateProviderAsync(long ProviderId, string Token, long UserId, long FacilityId, object userState) {
            if ((this.ActivateProviderOperationCompleted == null)) {
                this.ActivateProviderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnActivateProviderOperationCompleted);
            }
            this.InvokeAsync("ActivateProvider", new object[] {
                        ProviderId,
                        Token,
                        UserId,
                        FacilityId}, this.ActivateProviderOperationCompleted, userState);
        }
        
        private void OnActivateProviderOperationCompleted(object arg) {
            if ((this.ActivateProviderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ActivateProviderCompleted(this, new ActivateProviderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeactivateProvider", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ProviderResponse DeactivateProvider(long ProviderId, string Token, long UserId, long FacilityId) {
            object[] results = this.Invoke("DeactivateProvider", new object[] {
                        ProviderId,
                        Token,
                        UserId,
                        FacilityId});
            return ((ProviderResponse)(results[0]));
        }
        
        /// <remarks/>
        public void DeactivateProviderAsync(long ProviderId, string Token, long UserId, long FacilityId) {
            this.DeactivateProviderAsync(ProviderId, Token, UserId, FacilityId, null);
        }
        
        /// <remarks/>
        public void DeactivateProviderAsync(long ProviderId, string Token, long UserId, long FacilityId, object userState) {
            if ((this.DeactivateProviderOperationCompleted == null)) {
                this.DeactivateProviderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeactivateProviderOperationCompleted);
            }
            this.InvokeAsync("DeactivateProvider", new object[] {
                        ProviderId,
                        Token,
                        UserId,
                        FacilityId}, this.DeactivateProviderOperationCompleted, userState);
        }
        
        private void OnDeactivateProviderOperationCompleted(object arg) {
            if ((this.DeactivateProviderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeactivateProviderCompleted(this, new DeactivateProviderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ChangeProviderEmail", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ProviderResponse ChangeProviderEmail(long ProviderId, string Email, string Token, long UserId, long FacilityId) {
            object[] results = this.Invoke("ChangeProviderEmail", new object[] {
                        ProviderId,
                        Email,
                        Token,
                        UserId,
                        FacilityId});
            return ((ProviderResponse)(results[0]));
        }
        
        /// <remarks/>
        public void ChangeProviderEmailAsync(long ProviderId, string Email, string Token, long UserId, long FacilityId) {
            this.ChangeProviderEmailAsync(ProviderId, Email, Token, UserId, FacilityId, null);
        }
        
        /// <remarks/>
        public void ChangeProviderEmailAsync(long ProviderId, string Email, string Token, long UserId, long FacilityId, object userState) {
            if ((this.ChangeProviderEmailOperationCompleted == null)) {
                this.ChangeProviderEmailOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChangeProviderEmailOperationCompleted);
            }
            this.InvokeAsync("ChangeProviderEmail", new object[] {
                        ProviderId,
                        Email,
                        Token,
                        UserId,
                        FacilityId}, this.ChangeProviderEmailOperationCompleted, userState);
        }
        
        private void OnChangeProviderEmailOperationCompleted(object arg) {
            if ((this.ChangeProviderEmailCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ChangeProviderEmailCompleted(this, new ChangeProviderEmailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class ProviderParms {
        
        private int optionField;
        
        private long providerIdField;
        
        private long facilityIdField;
        
        /// <remarks/>
        public int Option {
            get {
                return this.optionField;
            }
            set {
                this.optionField = value;
            }
        }
        
        /// <remarks/>
        public long ProviderId {
            get {
                return this.providerIdField;
            }
            set {
                this.providerIdField = value;
            }
        }
        
        /// <remarks/>
        public long FacilityId {
            get {
                return this.facilityIdField;
            }
            set {
                this.facilityIdField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class ProviderSearchParms {
        
        private long providerIdField;
        
        private string firstNameField;
        
        private string lastNameField;
        
        private string licenseField;
        
        private string phoneField;
        
        private string eMailField;
        
        /// <remarks/>
        public long ProviderId {
            get {
                return this.providerIdField;
            }
            set {
                this.providerIdField = value;
            }
        }
        
        /// <remarks/>
        public string FirstName {
            get {
                return this.firstNameField;
            }
            set {
                this.firstNameField = value;
            }
        }
        
        /// <remarks/>
        public string LastName {
            get {
                return this.lastNameField;
            }
            set {
                this.lastNameField = value;
            }
        }
        
        /// <remarks/>
        public string License {
            get {
                return this.licenseField;
            }
            set {
                this.licenseField = value;
            }
        }
        
        /// <remarks/>
        public string Phone {
            get {
                return this.phoneField;
            }
            set {
                this.phoneField = value;
            }
        }
        
        /// <remarks/>
        public string EMail {
            get {
                return this.eMailField;
            }
            set {
                this.eMailField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class ProviderImageData {
        
        private bool validField;
        
        private string errorMessageField;
        
        private long providerIdField;
        
        private byte[] imageField;
        
        private string imageFormatField;
        
        /// <remarks/>
        public bool Valid {
            get {
                return this.validField;
            }
            set {
                this.validField = value;
            }
        }
        
        /// <remarks/>
        public string ErrorMessage {
            get {
                return this.errorMessageField;
            }
            set {
                this.errorMessageField = value;
            }
        }
        
        /// <remarks/>
        public long ProviderId {
            get {
                return this.providerIdField;
            }
            set {
                this.providerIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] Image {
            get {
                return this.imageField;
            }
            set {
                this.imageField = value;
            }
        }
        
        /// <remarks/>
        public string ImageFormat {
            get {
                return this.imageFormatField;
            }
            set {
                this.imageFormatField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class ProviderTableData {
        
        private bool validField;
        
        private string errorMessageField;
        
        private System.Data.DataTable dtField;
        
        /// <remarks/>
        public bool Valid {
            get {
                return this.validField;
            }
            set {
                this.validField = value;
            }
        }
        
        /// <remarks/>
        public string ErrorMessage {
            get {
                return this.errorMessageField;
            }
            set {
                this.errorMessageField = value;
            }
        }
        
        /// <remarks/>
        public System.Data.DataTable dt {
            get {
                return this.dtField;
            }
            set {
                this.dtField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class ProviderResponse {
        
        private bool validField;
        
        private string errorMessageField;
        
        /// <remarks/>
        public bool Valid {
            get {
                return this.validField;
            }
            set {
                this.validField = value;
            }
        }
        
        /// <remarks/>
        public string ErrorMessage {
            get {
                return this.errorMessageField;
            }
            set {
                this.errorMessageField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class ProviderData {
        
        private bool validField;
        
        private string errorMessageField;
        
        private long providerIdField;
        
        private long practiceIdField;
        
        private long userIdField;
        
        private string titleField;
        
        private string firstNameField;
        
        private string middleNameField;
        
        private string lastNameField;
        
        private string dEAField;
        
        private string licenseField;
        
        private string phoneField;
        
        private string emailField;
        
        /// <remarks/>
        public bool Valid {
            get {
                return this.validField;
            }
            set {
                this.validField = value;
            }
        }
        
        /// <remarks/>
        public string ErrorMessage {
            get {
                return this.errorMessageField;
            }
            set {
                this.errorMessageField = value;
            }
        }
        
        /// <remarks/>
        public long ProviderId {
            get {
                return this.providerIdField;
            }
            set {
                this.providerIdField = value;
            }
        }
        
        /// <remarks/>
        public long PracticeId {
            get {
                return this.practiceIdField;
            }
            set {
                this.practiceIdField = value;
            }
        }
        
        /// <remarks/>
        public long UserId {
            get {
                return this.userIdField;
            }
            set {
                this.userIdField = value;
            }
        }
        
        /// <remarks/>
        public string Title {
            get {
                return this.titleField;
            }
            set {
                this.titleField = value;
            }
        }
        
        /// <remarks/>
        public string FirstName {
            get {
                return this.firstNameField;
            }
            set {
                this.firstNameField = value;
            }
        }
        
        /// <remarks/>
        public string MiddleName {
            get {
                return this.middleNameField;
            }
            set {
                this.middleNameField = value;
            }
        }
        
        /// <remarks/>
        public string LastName {
            get {
                return this.lastNameField;
            }
            set {
                this.lastNameField = value;
            }
        }
        
        /// <remarks/>
        public string DEA {
            get {
                return this.dEAField;
            }
            set {
                this.dEAField = value;
            }
        }
        
        /// <remarks/>
        public string License {
            get {
                return this.licenseField;
            }
            set {
                this.licenseField = value;
            }
        }
        
        /// <remarks/>
        public string Phone {
            get {
                return this.phoneField;
            }
            set {
                this.phoneField = value;
            }
        }
        
        /// <remarks/>
        public string Email {
            get {
                return this.emailField;
            }
            set {
                this.emailField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetProviderDataCompletedEventHandler(object sender, GetProviderDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetProviderDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetProviderDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ProviderData Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ProviderData)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void SaveProviderDataCompletedEventHandler(object sender, SaveProviderDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SaveProviderDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SaveProviderDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ProviderResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ProviderResponse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetPracticeListCompletedEventHandler(object sender, GetPracticeListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPracticeListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPracticeListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ProviderTableData Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ProviderTableData)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetFacilityListCompletedEventHandler(object sender, GetFacilityListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFacilityListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFacilityListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ProviderTableData Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ProviderTableData)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetFacilityListForProvidersCompletedEventHandler(object sender, GetFacilityListForProvidersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFacilityListForProvidersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFacilityListForProvidersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ProviderTableData Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ProviderTableData)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetProvidersForPatientListCompletedEventHandler(object sender, GetProvidersForPatientListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetProvidersForPatientListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetProvidersForPatientListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ProviderTableData Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ProviderTableData)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetPatientForProviderListCompletedEventHandler(object sender, GetPatientForProviderListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPatientForProviderListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPatientForProviderListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ProviderTableData Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ProviderTableData)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetProviderImageDataCompletedEventHandler(object sender, GetProviderImageDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetProviderImageDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetProviderImageDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ProviderImageData Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ProviderImageData)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void SaveProvidermageDataCompletedEventHandler(object sender, SaveProvidermageDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SaveProvidermageDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SaveProvidermageDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ProviderImageData Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ProviderImageData)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetPatientProviderInfoListCompletedEventHandler(object sender, GetPatientProviderInfoListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPatientProviderInfoListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPatientProviderInfoListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ProviderTableData Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ProviderTableData)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void ProviderEmailSearchCompletedEventHandler(object sender, ProviderEmailSearchCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProviderEmailSearchCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProviderEmailSearchCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ProviderTableData Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ProviderTableData)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void ProviderSearchCompletedEventHandler(object sender, ProviderSearchCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProviderSearchCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProviderSearchCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ProviderTableData Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ProviderTableData)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void ActivateProviderCompletedEventHandler(object sender, ActivateProviderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ActivateProviderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ActivateProviderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ProviderResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ProviderResponse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void DeactivateProviderCompletedEventHandler(object sender, DeactivateProviderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeactivateProviderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeactivateProviderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ProviderResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ProviderResponse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void ChangeProviderEmailCompletedEventHandler(object sender, ChangeProviderEmailCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ChangeProviderEmailCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ChangeProviderEmailCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ProviderResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ProviderResponse)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591